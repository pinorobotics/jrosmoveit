/*
 * Copyright 2021 msgmonster project
 * 
 * Website: https://github.com/pinorobotics/msgmonster
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * msgmonster autogenerated Message class for jrosclient
 * 
 * Generated for ROS msg file: moveit_msgs/MoveItErrorCodes
 */

package pinorobotics.jrosmoveit.moveit_msgs;

import java.util.Objects;

import id.jrosmessages.Message;
import id.jrosmessages.MessageMetadata;
import id.kineticstreamer.annotations.Streamed;
import id.xfunction.XJson;

import id.jrosmessages.std_msgs.Int32Message;

/**
 * Definition for moveit_msgs/MoveItErrorCodes
 */
@MessageMetadata(
    type = MoveItErrorCodesMessage.NAME,
    md5sum = "35a153d4489afb90a182bbf874ecc0f3")
public class MoveItErrorCodesMessage implements Message {
   
   static final String NAME = "moveit_msgs/MoveItErrorCodes";

   @Streamed
   public Int32Message val = new Int32Message();
   
   /**
    * Overall behavior
    */
   public static final int SUCCESS=1;
   public static final int FAILURE=99999;

   public static final int PLANNING_FAILED=-1;
   public static final int INVALID_MOTION_PLAN=-2;
   public static final int MOTION_PLAN_INVALIDATED_BY_ENVIRONMENT_CHANGE=-3;
   public static final int CONTROL_FAILED=-4;
   public static final int UNABLE_TO_AQUIRE_SENSOR_DATA=-5;
   public static final int TIMED_OUT=-6;
   public static final int PREEMPTED=-7;

   /**
    * Planning & kinematics request errors
    */
   public static final int START_STATE_IN_COLLISION=-10;
   public static final int START_STATE_VIOLATES_PATH_CONSTRAINTS=-11;

   public static final int GOAL_IN_COLLISION=-12;
   public static final int GOAL_VIOLATES_PATH_CONSTRAINTS=-13;
   public static final int GOAL_CONSTRAINTS_VIOLATED=-14;

   public static final int INVALID_GROUP_NAME=-15;
   public static final int INVALID_GOAL_CONSTRAINTS=-16;
   public static final int INVALID_ROBOT_STATE=-17;
   public static final int INVALID_LINK_NAME=-18;
   public static final int INVALID_OBJECT_NAME=-19;

   /**
    * System errors
    */
   public static final int FRAME_TRANSFORM_FAILURE=-21;
   public static final int COLLISION_CHECKING_UNAVAILABLE=-22;
   public static final int ROBOT_STATE_STALE=-23;
   public static final int SENSOR_INFO_STALE=-24;
   public static final int COMMUNICATION_FAILURE=-25;

   /**
    * Kinematics errors
    */
   public static final int NO_IK_SOLUTION=-31;
   
   public MoveItErrorCodesMessage withVal(int val) {
       this.val.data = val;
       return this;
   }
   
   @Override
   public int hashCode() {
       return Objects.hash(
           val
       );
   }
   
   @Override
   public boolean equals(Object obj) {
       var other = (MoveItErrorCodesMessage) obj;
       return
           Objects.equals(val, other.val)
       ;
   }
   
   @Override
   public String toString() {
       return XJson.asString(
           "val", val
       );
   }
   
}

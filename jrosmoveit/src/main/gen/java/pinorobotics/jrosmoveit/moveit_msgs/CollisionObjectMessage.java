/*
 * Copyright 2021 msgmonster project
 * 
 * Website: https://github.com/pinorobotics/msgmonster
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * msgmonster autogenerated Message class for jrosclient
 * 
 * Generated for ROS msg file: moveit_msgs/CollisionObject
 */

package pinorobotics.jrosmoveit.moveit_msgs;

import java.util.Objects;

import id.jrosmessages.Message;
import id.jrosmessages.MessageMetadata;
import id.kineticstreamer.annotations.Streamed;
import id.xfunction.XJson;

import id.jrosmessages.geometry_msgs.PoseMessage;
import id.jrosmessages.object_recognition_msgs.ObjectTypeMessage;
import id.jrosmessages.shape_msgs.MeshMessage;
import id.jrosmessages.shape_msgs.PlaneMessage;
import id.jrosmessages.shape_msgs.SolidPrimitiveMessage;
import id.jrosmessages.std_msgs.HeaderMessage;
import id.jrosmessages.std_msgs.StringMessage;
import java.util.Arrays;

/**
 * Definition for moveit_msgs/CollisionObject
 */
@MessageMetadata(
    type = CollisionObjectMessage.NAME,
    md5sum = "dbba710596087da521c07564160dfccb")
public class CollisionObjectMessage implements Message {
   
   static final String NAME = "moveit_msgs/CollisionObject";

   public enum UnknownType {
      /**
       * Adds the object to the planning scene. If the object previously existed, it is replaced.
       */
      ADD,
      
      /**
       * Removes the object from the environment entirely (everything that matches the specified id)
       */
      REMOVE,
      
      /**
       * Append to an object that already exists in the planning scene. If the object does not exist, it is added.
       */
      APPEND,
      
      /**
       * If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
       * if solely moving the object is desired
       */
      MOVE,
      
      
   }
   
   /**
    * A header, used for interpreting the poses
    */
   @Streamed
   public HeaderMessage header = new HeaderMessage();
   
   /**
    * DISCLAIMER: This field is not in use yet and all other poses
    * are still interpreted in the header frame.
    * https://github.com/ros-planning/moveit/pull/2037
    * implements the actual logic for this field.
    * ---
    * The object's pose relative to the header frame.
    * The shapes and subframe poses are defined relative to this pose.
    */
   @Streamed
   public PoseMessage pose = new PoseMessage();
   
   /**
    * The id of the object (name used in MoveIt)
    */
   @Streamed
   public StringMessage id = new StringMessage();
   
   /**
    * The object type in a database of known objects
    */
   @Streamed
   public ObjectTypeMessage type = new ObjectTypeMessage();
   
   /**
    * The collision geometries associated with the object.
    * Their poses are with respect to the object's pose
    * Solid geometric primitives
    */
   @Streamed
   public SolidPrimitiveMessage[] primitives = new SolidPrimitiveMessage[0];
   
   @Streamed
   public PoseMessage[] primitive_poses = new PoseMessage[0];
   
   /**
    * Meshes
    */
   @Streamed
   public MeshMessage[] meshes = new MeshMessage[0];
   
   @Streamed
   public PoseMessage[] mesh_poses = new PoseMessage[0];
   
   /**
    * Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
    */
   @Streamed
   public PlaneMessage[] planes = new PlaneMessage[0];
   
   @Streamed
   public PoseMessage[] plane_poses = new PoseMessage[0];
   
   /**
    * Named subframes on the object. Use these to define points of interest on the object that you want
    * to plan with (e.g. "tip", "spout", "handle"). The id of the object will be prepended to the subframe.
    * If an object with the id "screwdriver" and a subframe "tip" is in the scene, you can use the frame
    * "screwdriver/tip" for planning.
    * The length of the subframe_names and subframe_poses has to be identical.
    */
   @Streamed
   public StringMessage[] subframe_names = new StringMessage[0];
   
   @Streamed
   public PoseMessage[] subframe_poses = new PoseMessage[0];
   
   /**
    * Operation to be performed
    */
   @Streamed
   public byte operation;
   
   public CollisionObjectMessage withHeader(HeaderMessage header) {
       this.header = header;
       return this;
   }
   
   public CollisionObjectMessage withPose(PoseMessage pose) {
       this.pose = pose;
       return this;
   }
   
   public CollisionObjectMessage withId(StringMessage id) {
       this.id = id;
       return this;
   }
   
   public CollisionObjectMessage withType(ObjectTypeMessage type) {
       this.type = type;
       return this;
   }
   
   public CollisionObjectMessage withPrimitives(SolidPrimitiveMessage... primitives) {
       this.primitives = primitives;
       return this;
   }
   
   public CollisionObjectMessage withPrimitivePoses(PoseMessage... primitive_poses) {
       this.primitive_poses = primitive_poses;
       return this;
   }
   
   public CollisionObjectMessage withMeshes(MeshMessage... meshes) {
       this.meshes = meshes;
       return this;
   }
   
   public CollisionObjectMessage withMeshPoses(PoseMessage... mesh_poses) {
       this.mesh_poses = mesh_poses;
       return this;
   }
   
   public CollisionObjectMessage withPlanes(PlaneMessage... planes) {
       this.planes = planes;
       return this;
   }
   
   public CollisionObjectMessage withPlanePoses(PoseMessage... plane_poses) {
       this.plane_poses = plane_poses;
       return this;
   }
   
   public CollisionObjectMessage withSubframeNames(StringMessage... subframe_names) {
       this.subframe_names = subframe_names;
       return this;
   }
   
   public CollisionObjectMessage withSubframePoses(PoseMessage... subframe_poses) {
       this.subframe_poses = subframe_poses;
       return this;
   }
   
   public CollisionObjectMessage withOperation(byte operation) {
       this.operation = operation;
       return this;
   }
   
   @Override
   public int hashCode() {
       return Objects.hash(
           header,
           pose,
           id,
           type,
           Arrays.hashCode(primitives),
           Arrays.hashCode(primitive_poses),
           Arrays.hashCode(meshes),
           Arrays.hashCode(mesh_poses),
           Arrays.hashCode(planes),
           Arrays.hashCode(plane_poses),
           Arrays.hashCode(subframe_names),
           Arrays.hashCode(subframe_poses),
           operation
       );
   }
   
   @Override
   public boolean equals(Object obj) {
       var other = (CollisionObjectMessage) obj;
       return
           Objects.equals(header, other.header) &&
           Objects.equals(pose, other.pose) &&
           Objects.equals(id, other.id) &&
           Objects.equals(type, other.type) &&
           Arrays.equals(primitives, other.primitives) &&
           Arrays.equals(primitive_poses, other.primitive_poses) &&
           Arrays.equals(meshes, other.meshes) &&
           Arrays.equals(mesh_poses, other.mesh_poses) &&
           Arrays.equals(planes, other.planes) &&
           Arrays.equals(plane_poses, other.plane_poses) &&
           Arrays.equals(subframe_names, other.subframe_names) &&
           Arrays.equals(subframe_poses, other.subframe_poses) &&
           operation == other.operation
       ;
   }
   
   @Override
   public String toString() {
       return XJson.asString(
           "header", header,
           "pose", pose,
           "id", id,
           "type", type,
           "primitives", primitives,
           "primitive_poses", primitive_poses,
           "meshes", meshes,
           "mesh_poses", mesh_poses,
           "planes", planes,
           "plane_poses", plane_poses,
           "subframe_names", subframe_names,
           "subframe_poses", subframe_poses,
           "operation", operation
       );
   }
   
}

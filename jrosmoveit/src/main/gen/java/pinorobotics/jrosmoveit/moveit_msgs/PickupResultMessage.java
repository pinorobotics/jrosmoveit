/*
 * Copyright 2021 jrosmoveit project
 * 
 * Website: https://github.com/pinorobotics/jrosmoveit
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package pinorobotics.jrosmoveit.moveit_msgs;

import id.jrosmessages.Message;
import id.jrosmessages.MessageMetadata;
import id.jrosmessages.std_msgs.StringMessage;
import id.xfunction.XJson;
import java.util.Arrays;
import java.util.Objects;

/**
 * Definition for moveit_msgs/PickupResult ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION
 * DEFINITION ======
 */
@MessageMetadata(name = PickupResultMessage.NAME, md5sum = "10e27212825b55941c921761d6a21e16")
public class PickupResultMessage implements Message {

    static final String NAME = "moveit_msgs/PickupResult";

    /** The overall result of the pickup attempt */
    public MoveItErrorCodesMessage error_code = new MoveItErrorCodesMessage();

    /** The full starting state of the robot at the start of the trajectory */
    public RobotStateMessage trajectory_start = new RobotStateMessage();

    /** The trajectory that moved group produced for execution */
    public RobotTrajectoryMessage[] trajectory_stages = new RobotTrajectoryMessage[0];

    public StringMessage[] trajectory_descriptions = new StringMessage[0];

    /** The performed grasp, if attempt was successful */
    public GraspMessage grasp = new GraspMessage();

    /** The amount of time in seconds it took to complete the plan */
    public double planning_time;

    public PickupResultMessage withErrorCode(MoveItErrorCodesMessage error_code) {
        this.error_code = error_code;
        return this;
    }

    public PickupResultMessage withTrajectoryStart(RobotStateMessage trajectory_start) {
        this.trajectory_start = trajectory_start;
        return this;
    }

    public PickupResultMessage withTrajectoryStages(RobotTrajectoryMessage... trajectory_stages) {
        this.trajectory_stages = trajectory_stages;
        return this;
    }

    public PickupResultMessage withTrajectoryDescriptions(
            StringMessage... trajectory_descriptions) {
        this.trajectory_descriptions = trajectory_descriptions;
        return this;
    }

    public PickupResultMessage withGrasp(GraspMessage grasp) {
        this.grasp = grasp;
        return this;
    }

    public PickupResultMessage withPlanningTime(double planning_time) {
        this.planning_time = planning_time;
        return this;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                error_code,
                trajectory_start,
                Arrays.hashCode(trajectory_stages),
                Arrays.hashCode(trajectory_descriptions),
                grasp,
                planning_time);
    }

    @Override
    public boolean equals(Object obj) {
        var other = (PickupResultMessage) obj;
        return Objects.equals(error_code, other.error_code)
                && Objects.equals(trajectory_start, other.trajectory_start)
                && Arrays.equals(trajectory_stages, other.trajectory_stages)
                && Arrays.equals(trajectory_descriptions, other.trajectory_descriptions)
                && Objects.equals(grasp, other.grasp)
                && planning_time == other.planning_time;
    }

    @Override
    public String toString() {
        return XJson.asString(
                "error_code", error_code,
                "trajectory_start", trajectory_start,
                "trajectory_stages", trajectory_stages,
                "trajectory_descriptions", trajectory_descriptions,
                "grasp", grasp,
                "planning_time", planning_time);
    }
}

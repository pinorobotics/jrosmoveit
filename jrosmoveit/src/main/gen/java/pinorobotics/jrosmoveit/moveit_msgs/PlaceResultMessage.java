/*
 * Copyright 2021 msgmonster project
 * 
 * Website: https://github.com/pinorobotics/msgmonster
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * msgmonster autogenerated Message class for jrosclient
 * 
 * Generated for ROS msg file: moveit_msgs/PlaceResult
 */

package pinorobotics.jrosmoveit.moveit_msgs;

import java.util.Objects;

import id.jrosmessages.Message;
import id.jrosmessages.MessageMetadata;
import id.kineticstreamer.annotations.Streamed;
import id.xfunction.XJson;

import id.jrosmessages.std_msgs.StringMessage;
import java.util.Arrays;

/**
 * Definition for moveit_msgs/PlaceResult
 * ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
 */
@MessageMetadata(
    type = PlaceResultMessage.NAME,
    md5sum = "978b357573c8ba8c31923f06ac62d8de")
public class PlaceResultMessage implements Message {
   
   static final String NAME = "moveit_msgs/PlaceResult";

   /**
    * The result of the place attempt
    */
   @Streamed
   public MoveItErrorCodesMessage error_code = new MoveItErrorCodesMessage();
   
   /**
    * The full starting state of the robot at the start of the trajectory
    */
   @Streamed
   public RobotStateMessage trajectory_start = new RobotStateMessage();
   
   /**
    * The trajectory that moved group produced for execution
    */
   @Streamed
   public RobotTrajectoryMessage[] trajectory_stages = new RobotTrajectoryMessage[0];
   
   @Streamed
   public StringMessage[] trajectory_descriptions = new StringMessage[0];
   
   /**
    * The successful place location, if any
    */
   @Streamed
   public PlaceLocationMessage place_location = new PlaceLocationMessage();
   
   /**
    * The amount of time in seconds it took to complete the plan
    */
   @Streamed
   public double planning_time;
   
   public PlaceResultMessage withErrorCode(MoveItErrorCodesMessage error_code) {
       this.error_code = error_code;
       return this;
   }
   
   public PlaceResultMessage withTrajectoryStart(RobotStateMessage trajectory_start) {
       this.trajectory_start = trajectory_start;
       return this;
   }
   
   public PlaceResultMessage withTrajectoryStages(RobotTrajectoryMessage... trajectory_stages) {
       this.trajectory_stages = trajectory_stages;
       return this;
   }
   
   public PlaceResultMessage withTrajectoryDescriptions(StringMessage... trajectory_descriptions) {
       this.trajectory_descriptions = trajectory_descriptions;
       return this;
   }
   
   public PlaceResultMessage withPlaceLocation(PlaceLocationMessage place_location) {
       this.place_location = place_location;
       return this;
   }
   
   public PlaceResultMessage withPlanningTime(double planning_time) {
       this.planning_time = planning_time;
       return this;
   }
   
   @Override
   public int hashCode() {
       return Objects.hash(
           error_code,
           trajectory_start,
           Arrays.hashCode(trajectory_stages),
           Arrays.hashCode(trajectory_descriptions),
           place_location,
           planning_time
       );
   }
   
   @Override
   public boolean equals(Object obj) {
       var other = (PlaceResultMessage) obj;
       return
           Objects.equals(error_code, other.error_code) &&
           Objects.equals(trajectory_start, other.trajectory_start) &&
           Arrays.equals(trajectory_stages, other.trajectory_stages) &&
           Arrays.equals(trajectory_descriptions, other.trajectory_descriptions) &&
           Objects.equals(place_location, other.place_location) &&
           planning_time == other.planning_time
       ;
   }
   
   @Override
   public String toString() {
       return XJson.asString(
           "error_code", error_code,
           "trajectory_start", trajectory_start,
           "trajectory_stages", trajectory_stages,
           "trajectory_descriptions", trajectory_descriptions,
           "place_location", place_location,
           "planning_time", planning_time
       );
   }
   
}
